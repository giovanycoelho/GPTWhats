#!/usr/bin/env node

import { spawn } from 'child_process';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üöÄ Iniciando build do GPTWhats para Electron...\n');

// Helper function to run commands
function runCommand(command, args, options = {}) {
  return new Promise((resolve, reject) => {
    console.log(`\nüì¶ Executando: ${command} ${args.join(' ')}`);
    
    const process = spawn(command, args, {
      stdio: 'inherit',
      shell: true,
      ...options
    });

    process.on('close', (code) => {
      if (code === 0) {
        resolve();
      } else {
        reject(new Error(`Comando falhou com c√≥digo ${code}`));
      }
    });

    process.on('error', (error) => {
      reject(error);
    });
  });
}

// Helper function to check if file exists
function fileExists(filePath) {
  try {
    return fs.existsSync(filePath);
  } catch {
    return false;
  }
}

// Helper function to create directory if it doesn't exist
function ensureDir(dirPath) {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
    console.log(`üìÅ Diret√≥rio criado: ${dirPath}`);
  }
}

async function buildElectronApp() {
  try {
    // Step 1: Install dependencies if needed
    console.log('\n=== STEP 1: Verificando depend√™ncias ===');
    
    if (!fileExists(path.join(__dirname, 'node_modules'))) {
      console.log('üì¶ Instalando depend√™ncias do backend...');
      await runCommand('npm', ['install']);
    } else {
      console.log('‚úÖ Depend√™ncias do backend j√° instaladas');
    }

    if (!fileExists(path.join(__dirname, 'client', 'node_modules'))) {
      console.log('üì¶ Instalando depend√™ncias do frontend...');
      await runCommand('npm', ['install'], { cwd: path.join(__dirname, 'client') });
    } else {
      console.log('‚úÖ Depend√™ncias do frontend j√° instaladas');
    }

    // Step 2: Build React app
    console.log('\n=== STEP 2: Building React App ===');
    await runCommand('npm', ['run', 'build'], { cwd: path.join(__dirname, 'client') });
    console.log('‚úÖ React app constru√≠do com sucesso');

    // Step 3: Create assets directory and placeholder files
    console.log('\n=== STEP 3: Preparando assets ===');
    ensureDir(path.join(__dirname, 'assets'));
    
    // Create placeholder icon if it doesn't exist
    const iconPath = path.join(__dirname, 'assets', 'icon.png');
    const icoPath = path.join(__dirname, 'assets', 'icon.ico');
    
    if (!fileExists(iconPath)) {
      console.log('‚ö†Ô∏è √çcone PNG n√£o encontrado. Criando placeholder...');
      // You should replace this with actual icon creation
      fs.writeFileSync(iconPath, ''); // Placeholder
    }
    
    if (!fileExists(icoPath)) {
      console.log('‚ö†Ô∏è √çcone ICO n√£o encontrado. Criando placeholder...');
      // You should replace this with actual icon creation
      fs.writeFileSync(icoPath, ''); // Placeholder
    }

    // Step 4: Create necessary directories
    console.log('\n=== STEP 4: Preparando estrutura de diret√≥rios ===');
    ensureDir(path.join(__dirname, 'temp'));
    ensureDir(path.join(__dirname, 'uploads'));
    
    // Ensure sessions directory exists but don't include in git
    if (!fileExists(path.join(__dirname, 'sessions'))) {
      ensureDir(path.join(__dirname, 'sessions'));
      console.log('üìÅ Diret√≥rio sessions criado');
    }

    // Step 5: Build Electron app
    console.log('\n=== STEP 5: Building Electron App ===');
    
    // For Windows
    await runCommand('npx', ['electron-builder', '--win', '--x64']);
    
    console.log('\nüéâ Build conclu√≠do com sucesso!');
    console.log('\nüìã Arquivos gerados:');
    console.log(`   - Instalador: ${path.join(__dirname, 'dist', 'GPTWhats Setup *.exe')}`);
    console.log(`   - Execut√°vel port√°til: ${path.join(__dirname, 'dist', 'win-unpacked', 'GPTWhats.exe')}`);
    
    console.log('\nüìù Pr√≥ximos passos:');
    console.log('   1. Teste o execut√°vel na pasta dist/win-unpacked/');
    console.log('   2. Distribua o instalador GPTWhats Setup.exe');
    console.log('   3. Configure um reposit√≥rio GitHub para auto-updates');
    console.log('   4. Adicione √≠cones personalizados na pasta assets/');

  } catch (error) {
    console.error('\n‚ùå Erro durante o build:', error.message);
    process.exit(1);
  }
}

// Step 6: Create release notes template
function createReleaseNotes() {
  const releaseNotesPath = path.join(__dirname, 'release-notes.md');
  
  if (!fileExists(releaseNotesPath)) {
    const template = `# Release Notes

## Vers√£o 1.0.0
### Novo
- Interface completa para gerenciamento do bot WhatsApp
- Integra√ß√£o com GPT-5 Mini da OpenAI
- Suporte a mensagens de texto, √°udio, imagens e documentos
- Sistema de configura√ß√£o avan√ßado
- Auto-updates autom√°ticos
- Dashboard com estat√≠sticas em tempo real
- Gerenciamento de contatos
- Sistema de notifica√ß√µes externas

### Melhorias
- Performance otimizada para grandes volumes de mensagens
- Interface responsiva e moderna
- Seguran√ßa aprimorada com rate limiting
- Logs detalhados para troubleshooting

### Corre√ß√µes
- Corre√ß√£o na persist√™ncia de configura√ß√µes
- Melhoria na estabilidade da conex√£o WhatsApp
- Otimiza√ß√£o no processamento de √°udio

---

## Como atualizar
O GPTWhats possui sistema de atualiza√ß√£o autom√°tica. Quando uma nova vers√£o estiver dispon√≠vel, voc√™ ser√° notificado e pode escolher atualizar imediatamente ou no pr√≥ximo rein√≠cio.

## Suporte
Para reportar problemas ou sugest√µes, abra uma issue no reposit√≥rio do GitHub.
`;

    fs.writeFileSync(releaseNotesPath, template);
    console.log('üìù Arquivo release-notes.md criado');
  }
}

// Run the build process
if (import.meta.url === `file://${process.argv[1]}`) {
  buildElectronApp()
    .then(() => {
      createReleaseNotes();
      console.log('\n‚ú® Tudo pronto para distribui√ß√£o!');
    })
    .catch((error) => {
      console.error('‚ùå Build falhou:', error);
      process.exit(1);
    });
}